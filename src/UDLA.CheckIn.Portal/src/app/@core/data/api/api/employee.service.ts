/**
 * UDLA CheckIn
 * Web API para registro de tiempos para docentes
 *
 * OpenAPI spec version: v1
 * Contact: jose.escudero@udla.edu.ec
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { EmployeeDto } from '../model/employeeDto';
import { EntryRecordDto } from '../model/entryRecordDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EmployeeService {

    protected basePath = 'http://localhost:50718';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param employeeId 
     * @param entryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeByEmployeeIdEntryrecordsByEntryIdDelete(employeeId: number, entryId: number, observe?: 'body', reportProgress?: boolean): Observable<EntryRecordDto>;
    public apiEmployeeByEmployeeIdEntryrecordsByEntryIdDelete(employeeId: number, entryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntryRecordDto>>;
    public apiEmployeeByEmployeeIdEntryrecordsByEntryIdDelete(employeeId: number, entryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntryRecordDto>>;
    public apiEmployeeByEmployeeIdEntryrecordsByEntryIdDelete(employeeId: number, entryId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling apiEmployeeByEmployeeIdEntryrecordsByEntryIdDelete.');
        }
        if (entryId === null || entryId === undefined) {
            throw new Error('Required parameter entryId was null or undefined when calling apiEmployeeByEmployeeIdEntryrecordsByEntryIdDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<EntryRecordDto>(`${this.basePath}/api/Employee/${encodeURIComponent(String(employeeId))}/entryrecords/${encodeURIComponent(String(entryId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param entryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeByEmployeeIdEntryrecordsByEntryIdGet(employeeId: number, entryId: number, observe?: 'body', reportProgress?: boolean): Observable<EntryRecordDto>;
    public apiEmployeeByEmployeeIdEntryrecordsByEntryIdGet(employeeId: number, entryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntryRecordDto>>;
    public apiEmployeeByEmployeeIdEntryrecordsByEntryIdGet(employeeId: number, entryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntryRecordDto>>;
    public apiEmployeeByEmployeeIdEntryrecordsByEntryIdGet(employeeId: number, entryId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling apiEmployeeByEmployeeIdEntryrecordsByEntryIdGet.');
        }
        if (entryId === null || entryId === undefined) {
            throw new Error('Required parameter entryId was null or undefined when calling apiEmployeeByEmployeeIdEntryrecordsByEntryIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<EntryRecordDto>(`${this.basePath}/api/Employee/${encodeURIComponent(String(employeeId))}/entryrecords/${encodeURIComponent(String(entryId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeByEmployeeIdEntryrecordsGet(employeeId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<EntryRecordDto>>;
    public apiEmployeeByEmployeeIdEntryrecordsGet(employeeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EntryRecordDto>>>;
    public apiEmployeeByEmployeeIdEntryrecordsGet(employeeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EntryRecordDto>>>;
    public apiEmployeeByEmployeeIdEntryrecordsGet(employeeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling apiEmployeeByEmployeeIdEntryrecordsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<EntryRecordDto>>(`${this.basePath}/api/Employee/${encodeURIComponent(String(employeeId))}/entryrecords`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeId 
     * @param entryRecordDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeByEmployeeIdEntryrecordsPost(employeeId: number, entryRecordDto?: EntryRecordDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiEmployeeByEmployeeIdEntryrecordsPost(employeeId: number, entryRecordDto?: EntryRecordDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiEmployeeByEmployeeIdEntryrecordsPost(employeeId: number, entryRecordDto?: EntryRecordDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiEmployeeByEmployeeIdEntryrecordsPost(employeeId: number, entryRecordDto?: EntryRecordDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling apiEmployeeByEmployeeIdEntryrecordsPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/Employee/${encodeURIComponent(String(employeeId))}/entryrecords`,
            entryRecordDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeByIdDelete(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiEmployeeByIdDelete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiEmployeeByIdDelete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiEmployeeByIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiEmployeeByIdDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/Employee/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeByIdGet(id: number, observe?: 'body', reportProgress?: boolean): Observable<EmployeeDto>;
    public apiEmployeeByIdGet(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeDto>>;
    public apiEmployeeByIdGet(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeDto>>;
    public apiEmployeeByIdGet(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiEmployeeByIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<EmployeeDto>(`${this.basePath}/api/Employee/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param offset 
     * @param limit 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeeGet(offset?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeDto>>;
    public apiEmployeeGet(offset?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeDto>>>;
    public apiEmployeeGet(offset?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeDto>>>;
    public apiEmployeeGet(offset?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined) {
            queryParameters = queryParameters.set('Offset', <any>offset);
        }
        if (limit !== undefined) {
            queryParameters = queryParameters.set('Limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<EmployeeDto>>(`${this.basePath}/api/Employee`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeePost(employeeDto?: EmployeeDto, observe?: 'body', reportProgress?: boolean): Observable<EmployeeDto>;
    public apiEmployeePost(employeeDto?: EmployeeDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeDto>>;
    public apiEmployeePost(employeeDto?: EmployeeDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeDto>>;
    public apiEmployeePost(employeeDto?: EmployeeDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<EmployeeDto>(`${this.basePath}/api/Employee`,
            employeeDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param employeeDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiEmployeePut(employeeDto?: EmployeeDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiEmployeePut(employeeDto?: EmployeeDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiEmployeePut(employeeDto?: EmployeeDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiEmployeePut(employeeDto?: EmployeeDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
            'application/xml',
            'text/xml',
            'application/_*+xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/Employee`,
            employeeDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
